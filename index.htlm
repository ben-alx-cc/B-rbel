<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <style>
    body { margin: 0; overflow: hidden; background: #87CEEB; }
    canvas { display: block; }
  </style>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/three@0.155.0/build/three.min.js"></script>

<script>
  // Szene, Kamera, Renderer
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.1, 1000);
  camera.position.set(0, 15, 20);
  camera.lookAt(0, 0, 0);

  const renderer = new THREE.WebGLRenderer({antialias: true});
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  // Licht
  const light = new THREE.DirectionalLight(0xffffff, 1);
  light.position.set(10, 20, 10);
  scene.add(light);
  scene.add(new THREE.AmbientLight(0xaaaaaa, 0.5));

  // Wasser (wellige Plane)
  const waterGeometry = new THREE.PlaneGeometry(100, 100, 100, 100);
  const waterMaterial = new THREE.MeshPhongMaterial({ color: 0x1e90ff, flatShading: true, side: THREE.DoubleSide });
  const water = new THREE.Mesh(waterGeometry, waterMaterial);
  water.rotation.x = -Math.PI/2;
  scene.add(water);

  // Taube (vereinfacht)
  const doveGroup = new THREE.Group();

  const body = new THREE.Mesh(
    new THREE.SphereGeometry(0.5, 16, 16),
    new THREE.MeshStandardMaterial({color: 0xffffff})
  );
  body.scale.set(1, 0.7, 2);
  doveGroup.add(body);

  const wingGeometry = new THREE.BoxGeometry(2, 0.05, 0.5);
  const wingMaterial = new THREE.MeshStandardMaterial({color: 0xffffff});
  const leftWing = new THREE.Mesh(wingGeometry, wingMaterial);
  const rightWing = new THREE.Mesh(wingGeometry, wingMaterial);
  leftWing.position.set(-1.2, 0, 0);
  rightWing.position.set(1.2, 0, 0);
  doveGroup.add(leftWing, rightWing);

  doveGroup.position.y = 2;
  scene.add(doveGroup);

  // Bewegung
  let speed = 0.02;
  let flap = false;
  let flapAngle = 0;

  function animateWings() {
    if (flap) {
      flapAngle += 0.3;
      const wingRotation = Math.sin(flapAngle) * 0.5;
      leftWing.rotation.z = wingRotation;
      rightWing.rotation.z = -wingRotation;
    } else {
      leftWing.rotation.z *= 0.9;
      rightWing.rotation.z *= 0.9;
    }
  }

  // Touch Steuerung
  document.body.addEventListener("touchstart", () => {
    flap = true;
    speed = 0.08;
  });
  document.body.addEventListener("touchend", () => {
    flap = false;
    speed = 0.02;
  });

  // Wasser Animation
  const originalVertices = water.geometry.attributes.position.array.slice();
  function updateWater(time) {
    const pos = water.geometry.attributes.position;
    for (let i = 0; i < pos.count; i++) {
      const y = Math.sin(i/5 + time*0.002) * 0.1;
      pos.setY(i, y);
    }
    pos.needsUpdate = true;
  }

  // Render Loop
  function animate(time) {
    requestAnimationFrame(animate);
    doveGroup.position.z -= speed;
    animateWings();
    updateWater(time);
    renderer.render(scene, camera);
  }
  animate();

  // Resize
  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });
</script>
</body>
</html>
